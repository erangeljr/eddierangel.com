
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: softwareengineering | Just Another Hacker... and his blog]]></title>
  <link href="http://eddierangel.com/blog/categories/softwareengineering/atom.xml" rel="self"/>
  <link href="http://eddierangel.com/"/>
  <updated>2015-04-09T16:38:19-07:00</updated>
  <id>http://eddierangel.com/</id>
  <author>
    <name><![CDATA[Eddie Rangel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Agile Development Methods and Project Management]]></title>
    <link href="http://eddierangel.com/blog/2014/10/26/agile-methods-project-management/"/>
    <updated>2014-10-26T06:48:57-07:00</updated>
    <id>http://eddierangel.com/blog/2014/10/26/agile-methods-project-management</id>
    <content type="html"><![CDATA[<p>I hear this a lot, “Do you use Agile?”
“Yes, we use Scrum”</p>

<p>I believe most Development shops don’t truly understand what it means to be Agile and Scrum doesn’t accomplish what many of them think it does. I believe that a lot of teams start off using Agile with the best intentions but slowly revert back to traditional non-agile methodologies. This usually happens when things goes wrong during the Software Development Lifecycle and when the Development Teams are forced to be reactive instead of proactive.</p>

<p>Many Software Development Teams work within the constraints of a non-software companies that do not understand how to develop software. Scrum is typically viewed as a fad or as a way to put off doing work. Scrum should be seen as a Project Management solution for running software development projects. Scrum includes using a product backlog, defining iterations, and using stand ups. You can even use it to better understand the roles that exist beyond titles within a team. Scrum is strictly how to define what work is going to be done and when it will be worked on. Scrum does not provide guidance on how to actually do the work.</p>

<p>What inevitably happens while using scrum is that non-technical stakeholders put too much focus on the burndown chart. They seem to get tunnel vision on this one metric. The tasks created and estimated for a User Story are the development teams best guess at what it will take to complete the work. I have noticed that although the development team has every intention to focus on the work defined in their scrum, they usually have to perform some work that was neither defined nor captured.</p>

<p>This additional work is also a metric that should be captured. It is directly related to defects in requirements, defects in code, and defects in design. By capturing these additional metrics a Team can better understand or explain the impact on the burndown chart.</p>

<p>To summarize my thoughts, Scrum is merely a means to manage a software development project. If you’re going to focus on metrics, include more than just the hours that are completed and the hours remaining. Using additional metrics is needed to view the project status as a whole. I believe if you include additional metrics you’ll gain valuable insight into your Software Development Process. Also, just because you say you’re Agile doesn’t make you Agile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Patterns: Bridge Pattern]]></title>
    <link href="http://eddierangel.com/blog/2014/03/16/design-patterns-bridge-pattern/"/>
    <updated>2014-03-16T10:48:57-07:00</updated>
    <id>http://eddierangel.com/blog/2014/03/16/design-patterns-bridge-pattern</id>
    <content type="html"><![CDATA[<p>I have been learning about different <a href="http://en.wikipedia.org/wiki/Design_Patterns">Design Patterns</a>. I purchased the book <a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/">Design Patterns</a> by the Gang of Four and have been going through trying to implement them using C#.</p>

<p>I am going to start off with the <a href="http://en.wikipedia.org/wiki/Bridge_pattern">Bridge Pattern</a>.</p>

<p>The Bridge Patterns is used to decouple an abstraction from its implementation. This will allow them to vary independently.</p>

<p>Let&rsquo;s say you have several types of related objects that you need to print.</p>

<p><div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
<span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="kt">var</span> <span class="n">pharmacyReferral</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Pharmacy</span><span class="p">(</span><span class="n">standard</span><span class="p">);</span>
<span class="n">pharmacyReferral</span><span class="p">.</span><span class="n">PharmacyReferralId</span> <span class="p">=</span> <span class="m">9</span><span class="p">;</span>
<span class="n">pharmacyReferral</span><span class="p">.</span><span class="n">Member</span> <span class="p">=</span> <span class="s">&quot;Clarence Worley&quot;</span><span class="p">;</span>
<span class="n">pharmacyReferral</span><span class="p">.</span><span class="n">NationalDrugCode</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;313&quot;</span><span class="p">,</span> <span class="s">&quot;Medicine&quot;</span><span class="p">);</span>
<span class="n">pharmacyReferral</span><span class="p">.</span><span class="n">Print</span><span class="p">();</span>
<span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">class</span> <span class="nc">Pharmacy</span><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">int</span> <span class="n">PharmacyReferralId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="k">public</span> <span class="kt">string</span> <span class="n">Member</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="k">public</span> <span class="n">Dictionary</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">NationalDrugCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

<span class="k">public</span> <span class="k">void</span> <span class="nf">Print</span><span class="p">()</span>
<span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Pharmacy Number&quot;</span><span class="p">,</span> <span class="n">PharmacyReferralId</span><span class="p">.</span><span class="n">ToString</span><span class="p">()));</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Member&quot;</span><span class="p">,</span> <span class="n">Member</span><span class="p">));</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">drug</span> <span class="k">in</span> <span class="n">NationalDrugCode</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Code&quot;</span><span class="p">,</span> <span class="n">drug</span><span class="p">.</span><span class="n">Key</span><span class="p">));</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">,</span> <span class="n">drug</span><span class="p">.</span><span class="n">Value</span><span class="p">));</span>
        <span class="p">}</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
<span class="p">}</span>
<span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span></code></pre></div></p>

<p>This is what we would typically do. Create a Print method that handles the printing of each of the Pharmacy objects.</p>

<p>Output:</p>

<p><div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Pharmacy</span> <span class="n">Number</span><span class="p">:</span> <span class="m">9</span>
<span class="n">Member</span><span class="p">:</span> <span class="n">Clarence</span> <span class="n">Worley</span>
<span class="n">Code</span><span class="p">:</span> <span class="m">313</span>
<span class="n">Name</span><span class="p">:</span> <span class="n">Medicine</span></code></pre></div></p>

<p>Let&rsquo;s say you had several object that needed the same type of functionality and they were similar enough that they could share an interface.</p>

<p>You could then create an interface that contained a print method that each object would implement.</p>

<p><div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">Referral</span>
 <span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">print</span><span class="p">();</span>
 <span class="p">}</span></code></pre></div></p>

<p>Now each of the object you create can implement the interface. In this scenario the abstraction and implementation are tightly coupled. What if we needed somebthing a little more flexible? What if each of the object needed to be printed in a different way? You could let your objects implement there own Print methods or you can add another layer of abstraction.</p>

<p>This is where you can use the Bridge Pattern to decouple the abstration from the implementation.</p>

<p><div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">class</span> <span class="nc">BridgeMain</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="n">Referral</span><span class="p">&gt;</span> <span class="n">authorizations</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Referral</span><span class="p">&gt;();&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="kt">var</span> <span class="n">standard</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StandardFormatter</span><span class="p">();</span>
    <span class="kt">var</span> <span class="n">executive</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ExecutiveFormatter</span><span class="p">();</span>
    <span class="kt">var</span> <span class="n">fancy</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FancyFormatter</span><span class="p">();</span>

    <span class="kt">var</span> <span class="n">pharmacyReferral</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Pharmacy</span><span class="p">(</span><span class="n">standard</span><span class="p">);</span>
    <span class="n">pharmacyReferral</span><span class="p">.</span><span class="n">PharmacyReferralId</span> <span class="p">=</span> <span class="m">9</span><span class="p">;</span>
    <span class="n">pharmacyReferral</span><span class="p">.</span><span class="n">Member</span> <span class="p">=</span> <span class="s">&quot;Clarence Worley&quot;</span><span class="p">;</span>
    <span class="n">pharmacyReferral</span><span class="p">.</span><span class="n">NationalDrugCode</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;313&quot;</span><span class="p">,</span> <span class="s">&quot;Medicine&quot;</span><span class="p">);</span>
    <span class="n">authorizations</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">pharmacyReferral</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">externalReferral</span> <span class="p">=</span> <span class="k">new</span> <span class="n">External</span><span class="p">(</span><span class="n">executive</span><span class="p">);</span>
    <span class="n">externalReferral</span><span class="p">.</span><span class="n">ExternalId</span> <span class="p">=</span> <span class="m">7</span><span class="p">;</span>
    <span class="n">externalReferral</span><span class="p">.</span><span class="n">Member</span> <span class="p">=</span> <span class="s">&quot;Jim Morrison&quot;</span><span class="p">;</span>
    <span class="n">externalReferral</span><span class="p">.</span><span class="n">Procedures</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;757&quot;</span><span class="p">,</span> <span class="s">&quot;Evaluation&quot;</span><span class="p">);</span>
    <span class="n">authorizations</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">externalReferral</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">internalReferral</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Internal</span><span class="p">(</span><span class="n">fancy</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Member</span> <span class="p">=</span> <span class="s">&quot;Pedro De Pacas&quot;</span><span class="p">,</span>
        <span class="n">InternalId</span> <span class="p">=</span> <span class="m">9</span><span class="p">,</span>
        <span class="n">Symptoms</span> <span class="p">=</span> <span class="s">&quot;Flu&quot;</span>
    <span class="p">};</span>

    <span class="n">authorizations</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">internalReferral</span><span class="p">);</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">auth</span> <span class="k">in</span> <span class="n">authorizations</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">auth</span><span class="p">.</span><span class="n">Print</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">();</span>
<span class="p">}</span>
<span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span></code></pre></div></p>

<p>Here I refactored the Referral Class from being an Interface to an Abstract Class and created an Abstract public method.
I then added an Interface I call an IFormatter to implement the variations needed for each type of Referral.</p>

<p><div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Referral</span>
<span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">protected</span> <span class="k">readonly</span> <span class="n">IFormatter</span> <span class="n">formatter</span><span class="p">;</span>

<span class="k">public</span> <span class="nf">Referral</span><span class="p">(</span><span class="n">IFormatter</span> <span class="n">formatter</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="n">formatter</span> <span class="p">=</span> <span class="n">formatter</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">abstract</span> <span class="k">public</span> <span class="k">void</span> <span class="nf">Print</span><span class="p">();</span>
<span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">interface</span> <span class="n">IFormatter</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="nf">Format</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">,</span> <span class="kt">string</span> <span class="k">value</span><span class="p">);</span>
<span class="p">}</span></code></pre></div></p>

<p>Now, I can create a Class that implements the IFormatter interface.</p>

<p><div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">StandardFormatter</span> <span class="p">:</span> <span class="n">IFormatter</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="nf">Format</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">,</span> <span class="kt">string</span> <span class="k">value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(&amp;</span><span class="n">ldquo</span><span class="p">;{</span><span class="m">0</span><span class="p">}:</span> <span class="p">{</span><span class="m">1</span><span class="p">}&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">key</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></div></p>

<p>Here is the refactored Pharmacy class</p>

<p><div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Pharmacy</span> <span class="p">:</span> <span class="n">Referral</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">PharmacyReferralId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Member</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="n">Dictionary</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">NationalDrugCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>


<span class="k">public</span> <span class="nf">Pharmacy</span><span class="p">(</span><span class="n">IFormatter</span> <span class="n">formatter</span><span class="p">)</span>
    <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">formatter</span><span class="p">)</span>
<span class="p">{</span>

    <span class="n">NationalDrugCode</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>

<span class="p">}</span>

<span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Print</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">formatter</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Pharmacy Number&quot;</span><span class="p">,</span> <span class="n">PharmacyReferralId</span><span class="p">.</span><span class="n">ToString</span><span class="p">()));</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">formatter</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Member&quot;</span><span class="p">,</span> <span class="n">Member</span><span class="p">));</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">drug</span> <span class="k">in</span> <span class="n">NationalDrugCode</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">formatter</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Code&quot;</span><span class="p">,</span> <span class="n">drug</span><span class="p">.</span><span class="n">Key</span><span class="p">));</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">formatter</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Name&quot;</span><span class="p">,</span> <span class="n">drug</span><span class="p">.</span><span class="n">Value</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
<span class="p">}</span>
<span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span></code></pre></div></p>

<p>We can then create custom Formatters to handle different formats for printing out our objects.</p>

<p>Here&rsquo;s the output for the different formatters I used for each of the objects that inherit the Abstract Class which implemnt the Interface.</p>

<p><div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Pharmacy</span> <span class="n">Number</span><span class="p">:</span> <span class="m">9</span>
<span class="n">Member</span><span class="p">:</span> <span class="n">Clarence</span> <span class="n">Worley</span>
<span class="n">Code</span><span class="p">:</span> <span class="m">313</span>
<span class="n">Name</span><span class="p">:</span> <span class="n">Medicine</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;&lt;</span><span class="n">italics</span><span class="p">&gt;</span> <span class="n">External</span> <span class="n">Number</span> <span class="p">&lt;/</span><span class="n">italics</span><span class="p">&gt;</span>     <span class="m">7</span>
<span class="p">&lt;</span><span class="n">italics</span><span class="p">&gt;</span> <span class="n">Member</span> <span class="p">&lt;/</span><span class="n">italics</span><span class="p">&gt;</span>      <span class="n">Jim</span> <span class="n">Morrison</span>
<span class="p">&lt;</span><span class="n">italics</span><span class="p">&gt;</span> <span class="n">Code</span> <span class="p">&lt;/</span><span class="n">italics</span><span class="p">&gt;</span>        <span class="m">757</span>
<span class="p">&lt;</span><span class="n">italics</span><span class="p">&gt;</span> <span class="n">Name</span> <span class="p">&lt;/</span><span class="n">italics</span><span class="p">&gt;</span>        <span class="n">Evaluation</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;&lt;</span><span class="n">bold</span><span class="p">&gt;</span> <span class="n">Internal</span> <span class="n">Number</span> <span class="p">&lt;/</span><span class="n">bold</span><span class="p">&gt;</span>           <span class="m">9</span>
<span class="p">&lt;</span><span class="n">bold</span><span class="p">&gt;</span> <span class="n">Member</span> <span class="p">&lt;/</span><span class="n">bold</span><span class="p">&gt;</span>            <span class="n">Pedro</span> <span class="n">De</span> <span class="n">Pacas</span>
<span class="p">&lt;</span><span class="n">bold</span><span class="p">&gt;</span> <span class="n">Symptoms</span> <span class="p">&lt;/</span><span class="n">bold</span><span class="p">&gt;</span>          <span class="n">Flu</span></code></pre></div></p>

<p>I used the HTML tags for demonstration purposes only. I wanted a way to convey that you could apply style or whatever you wanted. Since this is just a Console Application demo, I&rsquo;m kind of limited on what I can display. Either way. Hope you enjoyed my working example. Don&rsquo;t forget to check out the whole project on <a href="https://github.com/erangeljr/DesignPatterns/tree/master/BridgePattern">Github.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do you INVEST?]]></title>
    <link href="http://eddierangel.com/blog/2014/02/19/do-you-invest/"/>
    <updated>2014-02-19T05:48:57-08:00</updated>
    <id>http://eddierangel.com/blog/2014/02/19/do-you-invest</id>
    <content type="html"><![CDATA[<p>When we look at a User Story, we try to apply the <a href="http://xp123.com/articles/invest-in-good-stories-and-smart-tasks/">I.N.V.E.S.T</a> methodology to each User Story. By ensuring that User Stories meet certain criteria, we are in a better position to estimate efforts. Most of our Agile Software Development teams use the Fibonacci Sequence to give an estimated effort of what it will take to complete the User Story. When the efforts begins to get above a certain threshold, it is typically because it does not fall within the constraits of INVEST.</p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">&lt;/p&gt;

&lt;p&gt;I   Independent     Is it self contained?
N   Negotiable      Can it be changed and rewritten?
V   Valuable        Does it deliver value?
E   Estimable       Can you estimate the size?.
S   Small           Is it too big? Should it be broken down?
T   Testable        Can you create tests for it?&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>Once you&rsquo;re ready to begin tasking you can make sure you&rsquo;re being <a href="http://xp123.com/articles/invest-in-good-stories-and-smart-tasks/">S.M.A.R.T</a></p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">&lt;/p&gt;

&lt;p&gt;S   Specific        Do you understand what is involved?
M   Measurable      How will you know when you&amp;rsquo;re done?
A   Achievable      Can this be done?
R   Relevant        How is this realted?
T   Time-boxed      How much time will it take?&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>

<p>The next time you have a planning meeting and you&rsquo;re trying to estimate your User Stories, try applying INVEST to it. It really helps to ensure you do not over commit your self or your team. Once you&rsquo;ve committed to a User Story, you should be able to create SMART tasks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String Extensions using Action Delegate]]></title>
    <link href="http://eddierangel.com/blog/2014/02/09/string-extensions-using-action-delegate/"/>
    <updated>2014-02-09T05:48:57-08:00</updated>
    <id>http://eddierangel.com/blog/2014/02/09/string-extensions-using-action-delegate</id>
    <content type="html"><![CDATA[<p>I was introduced to an Action Delegate on Friday. An Action Delegate encapsulates a method that has no parameters and does not return a value. In this example it will encapsulate a method that has two parameters, a string and a string array. My example Extends the string data type to include a Log Method that writes the string to the Console. You could modify this to write to a Log File.</p>

<p><div class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
<span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="s">&quot;log this message&quot;</span><span class="p">.</span><span class="n">Log</span><span class="p">();</span>

<span class="kt">var</span> <span class="n">textToLog</span> <span class="p">=</span> <span class="s">&quot;This is a log&quot;</span><span class="p">;</span>

<span class="n">textToLog</span><span class="p">.</span><span class="n">Log</span><span class="p">();</span>

<span class="s">&quot;{0} This is a new string {1}&quot;</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span><span class="s">&quot;pre&quot;</span><span class="p">,</span> <span class="s">&quot;post&quot;</span><span class="p">});</span>
<span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">StringExtensions</span><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Log</span><span class="p">(</span><span class="k">this</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">paramList</span> <span class="p">=</span> <span class="k">null</span><span class="p">){</span>
    <span class="n">Action</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">[]&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">log</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">;</span>
    <span class="n">log</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">paramList</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span></code></pre></div></p>

<p>This is what would be output to the Console.</p>

<p><div class="highlight"><pre><code class="language-text" data-lang="text">&lt;/p&gt;

&lt;p&gt;log this message
This is a log
pre This is a new string post&lt;/p&gt;

&lt;p&gt;</code></pre></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do you Agile?]]></title>
    <link href="http://eddierangel.com/blog/2014/01/31/agile-scrum-xp/"/>
    <updated>2014-01-31T14:17:57-08:00</updated>
    <id>http://eddierangel.com/blog/2014/01/31/agile-scrum-xp</id>
    <content type="html"><![CDATA[<p>Are you a part of an Agile Software Development Team? How do you know? I&rsquo;ve been reading the Agile Project Management book by Jim Highsmith. In his book he says, &ldquo;Agility is principally about mindset, not practices.&rdquo; In his book he recommends asking yourself and/or Project Leaders a set of questions to assist in determining whether you have an agile mindset.</p>

<p>&ldquo;In what specific ways and with what practices do you focous on value first and constraints last?&rdquo;
&ldquo;In what specific ways and with what practices do you manage teams rather than tasks?&rdquo;
&ldquo;In what specific ways and with what practices do you adapt to change rather than conform to plans?&rdquo;</p>

<p>As I was reading through the first couple of chapters, I found myself relating to a lot of the pit falls people experience when they&rsquo;re working on Teams who are Agile In Name Only. Don&rsquo;t be AINO!</p>
]]></content>
  </entry>
  
</feed>
